{"version":3,"file":"static/js/247.8674f604.chunk.js","mappings":"uQAAA,IAAMA,EAAO,mCAEAC,EAAsB,WAC/B,OAAOC,MAAM,2DAAD,OACmDF,IAC7DG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAb,GAClB,EAEYC,EAAiB,SAAAC,GAC1B,OAAOL,MAAM,sCAAD,OAC8BK,EAD9B,oBAC4CP,EAD5C,oBAEVG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAb,GAClB,EAEYG,EAAgB,SAAAD,GACzB,OAAOL,MAAM,sCAAD,OAC8BK,EAD9B,4BACoDP,EADpD,oBAEVG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAb,GAClB,EAEYI,EAAmB,SAAAF,GAC5B,OAAOL,MAAM,sCAAD,OAC8BK,EAD9B,4BACoDP,EADpD,oBAEVG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAb,GAClB,EAEYK,EAAqB,SAAAC,GAC9B,OAAOT,MAAM,qDAAD,OAC6CF,EAD7C,iCAC6EW,EAD7E,gCAEVR,MAAK,SAAAC,GAAQ,OAAIA,EAASC,MAAb,GAClB,C,yGCkBD,UA5Ca,WACT,OAA4BO,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAkBR,OAhBAE,EAAAA,EAAAA,YAAU,WAAM,wCACZ,sGAEQH,GAAa,GAFrB,UAG+BR,EAAAA,EAAAA,IAAcS,GAH7C,gBAGgBG,EAHhB,EAGgBA,KACRN,EAAUM,GAJlB,uDAMQC,QAAQC,IAAR,MANR,kBAOeC,MAAM,4BAPrB,yBASQP,GAAa,GATrB,6EADY,uBAAC,WAAD,wBAaZQ,EACH,GAAE,CAACP,KAGA,2BACKF,IAAa,2CACbF,GACG,wBACCA,EAAOY,KAAI,SAAAC,GACR,IAAMC,EAAU,yCAAqCD,EAAME,cAC3D,OACA,2BACI,gBAAKC,IAAKF,EAAYG,MAAM,MAAMC,IAAI,gBACtC,uBAAIL,EAAMM,QACV,uCAAeN,EAAMO,eAHhBP,EAAMnB,GAMlB,OAGD,oEAIf,C,sBC9CD,SAAS2B,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOC,GAEP,YADAP,EAAOO,EAET,CAEIF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOxC,KAAKmC,EAAOC,EAEvC,CAEe,SAASQ,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIN,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMa,EAAGK,MAAMJ,EAAME,GAEzB,SAASb,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOe,GACdpB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASe,EACnE,CAEAhB,OAAMiB,EACR,GACF,CACF,C","sources":["API/API.js","components/Cast/Cast.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["const API_KEY = `c7932d4433e8fee3124d33f1c9b27082`;\n\nexport const fetchTrandingMovies = () => {\n    return fetch(\n        `https://api.themoviedb.org/3/trending/movie/day?api_key=${API_KEY}`\n    ).then(response => response.json());\n};\n\nexport const fetchMovieById = id => {\n    return fetch(\n        `https://api.themoviedb.org/3/movie/${id}?api_key=${API_KEY}&language=en-US`\n    ).then(response => response.json());\n};\n\nexport const fetchCastById = id => {\n    return fetch(\n        `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n    ).then(response => response.json());\n};\n\nexport const fetchReviewsById = id => {\n    return fetch(\n        `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${API_KEY}&language=en-US`\n    ).then(response => response.json());\n};\n\nexport const fetchMoviesByQuery = query => {\n    return fetch(\n        `https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    ).then(response => response.json());\n};","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { fetchCastById } from \"../../API/API\"\n\nconst Cast = () => {\n    const [actors, setActors] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        async function fetchCast() {\n            try {\n                setIsLoading(true);\n                const { cast } = await fetchCastById(movieId);\n                setActors(cast);\n            } catch (error) {\n                console.log(error);\n                return alert(`Sorry, please try again`);\n            } finally {\n                setIsLoading(false);\n            }\n        }\n        fetchCast();\n    }, [movieId]);\n\n    return (\n        <div>\n            {isLoading && <div>...is Loading</div>}\n            {actors ? (\n                <ul>\n                {actors.map(actor => {\n                    const actorPhoto = `https://image.tmdb.org/t/p/w200${actor.profile_path}`;\n                    return (\n                    <li key={actor.id}>\n                        <img src={actorPhoto} width=\"100\" alt=\"actorPhoto\" />\n                        <p>{actor.name}</p>\n                        <p>Character: {actor.character}</p>\n                    </li>\n                    );\n                })}\n                </ul>\n            ) : (\n                <p>We don't have any cast for this movie.</p>\n            )}\n        </div>\n    );\n}\n\nexport default Cast;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["API_KEY","fetchTrandingMovies","fetch","then","response","json","fetchMovieById","id","fetchCastById","fetchReviewsById","fetchMoviesByQuery","query","useState","actors","setActors","isLoading","setIsLoading","movieId","useParams","useEffect","cast","console","log","alert","fetchCast","map","actor","actorPhoto","profile_path","src","width","alt","name","character","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}